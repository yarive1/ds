#include<iostream>
using namespace std;
class Node
{
    public:
        int key;
        Node *ln,*rn;
};

class Tree
{
    public:
        Node *root;
        Node* createTree(int key)
        {
            root=new Node();
            root->key = key;
            root->ln=NULL;
            root->rn=NULL;
            return root;
        }

       void insertNode(int key, Node* root) {
    if (root == NULL) {
        root = new Node();
        root->key = key;
        return;
    }

    if (key < root->key) {
        if (root->ln == NULL) {
            root->ln = new Node();
            root->ln->key = key;
        } else {
            insertNode(key, root->ln);
        }
    } else if (key > root->key) {
        if (root->rn == NULL) {
            root->rn = new Node();
            root->rn->key = key;
        } else {
            insertNode(key, root->rn);
        }
    } else {
        cout << "\n\tKey already present!!!\n";
    }
}


        void displayInorder(Node* root)
        {
            if(root != NULL)
            {
                displayInorder(root->ln);
                cout << root->key << "\n";
                displayInorder(root->rn);
            }
        }

        void displayFirst(Node *root)
        {
            while(root->ln!=NULL)
            {
                root=root->ln;
            }
            cout << "\n mininum number is "<< root->key;
        }

        void search(Node *root, int searchKey,int *flag1)
        {
            if(root!=NULL)
            {
                if(root->key==searchKey)
                {
                    *flag1=1;
                }
                else if(searchKey<(root->key))
                {
                    search(root->ln,searchKey,flag1);
                }
                else if(searchKey>(root->key))
                {
                    search(root->rn,searchKey,flag1);
                }
            }
        }

        int longestPath(Node*root)
        {
            if(root==NULL)
                return 0;
            int Lctr=longestPath(root->ln);
            int Rctr=longestPath(root->rn);

            if(Lctr>Rctr)
                return (Lctr+1);
            else
                return (Rctr+1);
        }

        Node *swapNodes(Node*root)
        {
            Node*temp;
            if(root==NULL)
                return NULL;
            temp=root->ln;
            root->ln=root->rn;
            root->rn=temp;

            swapNodes(root->ln);
            swapNodes(root->rn);
            return root;
        }
};

int main()
{
    int choice, order, flag=0,flag1=0;
    int key, searchKey;
    Tree t1;
    Node* root=NULL;
    do{
        cout<< "\n1.Create";
        cout<< "\n2.Display";
        cout<<"\n3.Swap left and right nodes";
        cout<<"\n4.Search";
        cout<<"\n5.Exit";
        cout<<"\n\tEnter your choice : ";
        cin>>choice;
        switch(choice)
        {
            case 1:
                cout << "Enter the number : ";
                cin>>key;
                if(flag==0)
                {
                    root=t1.createTree(key);
                    flag=1;
                }
                else
                {
                    t1.insertNode(key,root);
                }
                break;
            
            case 2:
                cout<<"\n1.Display List";
                cout<<"\n2.Show minimum number";
                cout<<"\n3.Show number of nodes in longest path";
                cout<<"\n\tEnter your choice : ";
                cin>>order;
                switch(order)
                {
                    case 1:
                        t1.displayInorder(root);
                        break;
                    case 2:
                        t1.displayFirst(root);
                        break;
                    case 3:
                        cout<<"\nThe height of the tree ot the longest path is : ";
                        cout << t1.longestPath(root);
                        break;
                }
                break;

            case 3:
                t1.swapNodes(root);
                cout<<"\nSwapped! The new list is :";
                t1.displayInorder(root);
                break;
            
            case 4:
                cout <<"\nEnter the number you want to search : ";
                cin >> searchKey;
                t1.search(root, searchKey,&flag1);
                if(flag1==1)
                    cout<<"\nKey Found!!\n";
                else
                    cout<<"\nKey not found!!\n";
                break;

            case 5:
                break;
        }
    }
    while (choice != 5);
    return 0;
}